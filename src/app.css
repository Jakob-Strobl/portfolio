@import "tailwindcss";

@font-face {
  font-family: "Raleway";
  /* prettier-ignore */
  src: 
    /* load from client's local if possible */
    local("Raleway-Regular"),
    /* try base raleway if possible for 'regular' */
    local("Raleway"),
    url("/fonts/Raleway-Regular.ttf");
  font-style: normal;
  font-weight: 400;
}

@font-face {
  font-family: "Raleway";
  /* prettier-ignore */
  src:
    /* load from client's local if possible */
    local("Raleway-Medium"),
    url("/fonts/Raleway-Medium.ttf");
  font-style: normal;
  font-weight: 500;
}

@theme {
  --color-night-black: #0b0712;
  --color-night-900: #13051f;
  --color-night-800: #2d0d4a;
  --color-night-700: #531787;
  --color-night-600: #7821c4;
  --color-night-500: #9743df;
  --color-night-400: #b172e9;
  --color-night-300: #ca9cf2;
  --color-night-200: #ddbff8;
  --color-night-100: #fdfbfe;
  --color-night-white: #fdfbfe;

  /* Custom transition properties */
  --transition-property-text: text-shadow;

  /* Custom text shadows */
  --text-shadow-sm: #ca9cf2 0 0 0.25rem;
  --text-shadow-md: #ca9cf2 0 0 0.45rem;
  --text-shadow-lg: #ca9cf2 0 0 0.7rem;

  --drop-shadow-outline: 0 0 0.45rem;

  /* Custom opacity */
  --opacity-88: 0.88;

  /* Custom screens */
  --breakpoint-xs: 480px;
}

@layer base {
  /* Scrollbar for WebKit browsers (Chrome, Safari, Edge) */
  ::-webkit-scrollbar {
    @apply w-2 h-2; /* Width and height for vertical/horizontal scrollbars */
  }

  ::-webkit-scrollbar-track {
    @apply bg-transparent;
  }

  ::-webkit-scrollbar-thumb {
    /* Semi-transparent dark gray, rounded, with transparent "padding" */
    @apply bg-night-100/24 rounded-xl border-2 border-transparent;
    /* Using background-clip to make the border part of the transparent background */
    background-clip: content-box;
  }

  ::-webkit-scrollbar-thumb:hover {
    @apply bg-night-100/40;
  }

  /* Scrollbar for Firefox */
  /* Apply to html or specific containers */
  html {
    scrollbar-width: thin; /* 'auto' or 'none' */
    scrollbar-color: rgba(0, 0, 0, 0.2) transparent; /* thumb-color track-color */
  }

  /*
   * For specific scrollable containers, you might want to create a
   * utility class or component class. See Approach 2.
   */
  html,
  body {
    font-family: Raleway, sans-serif;
  }
}

@layer components {
  /** 
    * Opacity fade-in component
    * @default duration is 500ms
    */
  .fade-in {
    @apply transition-opacity ease-out duration-500;
  }

  .fade-in-colors {
    @apply transition-colors ease-out duration-500;
  }

  .fade-in-bg {
    /* I like the -bg alias since plain css makes a background distinction */
    @apply transition-colors ease-out duration-500;
  }

  img.github-normalized-size {
    @apply w-[116px] sm:w-[171.5px] xl:w-[257px];

    /* 
     * Shadow may miscalculate the height on first load and first render of contact page when navigating
     *
     * This is because the resulting height of the image is unknown until the asset is loaded
     * We need to set the height in some fashion; using aspect so height is handled for any width values
     * Avoids having to do this: `@apply h-[83px] md:h-[166.5px] lg:h-[250px];` and manually maintain
     * 
     * WARN(Hardcoding):
     *   The ratio is the ratio of the image the browser will load so the correct height is used before image loads
     *   If the image changes and the aspect ratio changes, then this will need to be updated
     */
    @apply aspect-257/250;
  }

  img.linkedin-normalized-size {
    /* These widths match the height of LinkedIn image to the github octocat image 
     * Github Octacat Dimensions - 257x250
     * LinkedIn Bug Dimensions - 733x540
     *
     * Width/Height := LinkedIn bug aspect ratio 
     * Aspect Ratio * github image's height = Desired max height of LinkedIn Image
     *
     * Github: 257/250 = 1.028 (width/height)
     * LinkedIn: 733/540 = 1.3574 (width/height)
     * 
     * xl-w: 
     *     height of github image * LinkedIn ratio (width/height) = width
     *     250px (height) * 1.3574 (width/height) ~= 339.35px (width)
     *
     * sm-w:
     *     171.5pxx (width) / 1.028 (width/height) = 166.83px (height)
     *     166.83px (height) * 1.3574 (width/height) ~= 226.45px (width)
     * 
     * w:
     *     116px (width) / 1.028 (width/height) = 112.84px (height)
     *     112.84px (height) * 1.3574 (width/height) ~= ~153.17px (width)
     *
     * TODO(refactor): change to rems or is it better if this is pure static pixels?
     * TODO(refactor): to use vars so I can update all by just changing one value. Why do the math by hand every single time lmao
     * NOTE: width defined used more significant digits than explanation above
     */
    @apply w-[153.17px] sm:w-[226.45px] xl:w-[339.35px];

    /* Same reason as rule above */
    @apply aspect-733/540;
  }
}

@layer utilities {
  .scrollbar-custom {
    scrollbar-width: thin;
    scrollbar-color: rgba(253, 251, 254, 0.24) transparent;
  }

  .scrollbar-custom::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  .scrollbar-custom::-webkit-scrollbar-track {
    background: transparent;
  }

  .scrollbar-custom::-webkit-scrollbar-thumb {
    background: rgba(253, 251, 254, 0.24);
    border-radius: 12px;
    border: 2px solid transparent;
    background-clip: content-box;
  }

  .scrollbar-custom::-webkit-scrollbar-thumb:hover {
    background: rgba(253, 251, 254, 0.4);
    background-clip: content-box;
  }
}
